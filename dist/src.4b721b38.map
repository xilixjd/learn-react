{"version":3,"sources":["react/ReactElement.js","react/ReactComponent.js","react/index.js","reconciler/ReactFiberExpirationTime.js","reconciler/ReactUpdateQueue.js","shared/ReactSideEffectTags.js","shared/ReactWorkTags.js","reconciler/ReactFiber.js","reconciler/ReactFiberRoot.js","event/isInteractiveEvent.js","shared/ReactTreeTraversal.js","reconciler/Reconciler.js","CustomDom.js","App.js","index.js"],"names":["createElement","ReactElement","type","props","config","children","Object","keys","forEach","propName","childrenLength","arguments","length","childArray","Array","i","Component","updater","partialState","enqueueSetState","React","Suspense","Symbol","for","msToExpirationTime","expirationTimeToMs","computeAsyncExpiration","computeInteractiveExpiration","NoWork","Sync","UNIT_SIZE","MAGIC_NUMBER_OFFSET","ms","expirationTime","ceiling","num","precision","computeExpirationBucket","currentTime","expirationInMs","bucketSizeMs","LOW_PRIORITY_EXPIRATION","LOW_PRIORITY_BATCH_SIZE","HIGH_PRIORITY_EXPIRATION","HIGH_PRIORITY_BATCH_SIZE","createUpdate","enqueueUpdate","processUpdateQueue","UpdateQueue","baseState","firstUpdate","lastUpdate","Update","payload","next","appendUpdateToQueue","queue","update","fiber","updateQueue","memoizedState","getStateFromUpdate","prevState","undefined","assign","workInProgress","resultState","NoEffect","PerformedWork","Placement","PlacementAndUpdate","Deletion","ContentReset","Callback","DidCapture","Ref","Snapshot","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","FunctionalComponent","FunctionalComponentLazy","ClassComponent","ClassComponentLazy","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","ForwardRefLazy","Profiler","SuspenseComponent","FiberNode","createHostRootFiber","tag","pendingProps","stateNode","return","child","sibling","memoizedProps","effectTag","nextEffect","firstEffect","lastEffect","alternate","createFiberRoot","containerInfo","uninitializedFiber","root","current","finishedWork","isInteractiveEvent","interactiveEventTypeNames","nonInteractiveEventTypeNames","eventTypeNames","bubblePhaseRegistrationNames","map","name","toLocaleUpperCase","slice","capturePhaseRegistrationNames","registrationNames","eventType","includes","traverseTwoPhase","getParent","inst","fn","arg","path","push","Reconciler","hostConfig","now","shouldSetTextContent","createInstance","finalizeInitialChildren","appendInitialChild","scheduleDeferredCallback","prepareUpdate","appendChildToContainer","removeChildFromContainer","commitUpdate","scheduledRoot","isRendering","deadline","deadlineDidExpire","isBatchingInteractiveUpdates","isBatchingUpdates","isDispatchControlledEvent","originalStartTimeMs","currentRendererTime","currentSchedulerTime","isWorking","isCommitting","nextUnitOfWork","nextRenderExpirationTime","shouldTrackSideEffects","timeHeuristicForUnitOfWork","createContainer","updateContainer","element","container","requestCurrentTime","computeExpirationForFiber","scheduleRootUpdate","recomputeCurrentRendererTime","currentTimeMs","scheduleWork","scheduleWorkToRoot","node","requestWork","performSyncWork","scheduleCallbackWithExpirationTime","currentMs","expirationTimeMs","timeout","performAsyncWork","performWork","dl","performWorkOnRoot","shouldYield","timeRemaining","isExpired","completeRoot","isYieldy","renderRoot","createWorkInProgress","workLoop","thrownValue","sourceFiber","returnFiber","throwException","completeUnitOfWork","value","renderExpirationTime","then","thenable","onResolve","retrySuspendedRoot","bind","retryTime","performUnitOfWork","beginWork","unresolvedProps","updateClassComponent","updateHostRoot","updateHostComponent","updateFragment","updateSuspenseComponent","Error","nextChildren","reconcileChildren","nextProps","nextDidTimeout","fallback","get","key","_reactInternalFiber","set","classComponentUpdater","adoptClassInstance","instance","constructClassInstance","ctor","state","applyDerivedStateFromProps","getDerivedStateFromProps","mountClassInstance","newProps","checkShouldComponentUpdate","newState","shouldComponentUpdate","shouldUpdate","updateClassInstance","oldProps","oldState","componentDidUpdate","finishClassComponent","cloneChildFibers","currentChild","newChild","render","memoizeState","memoizeProps","reconcileChildFibers","currentFirstChild","isArray","reconcileChildrenArray","createFiberFromFragment","createFiberFromElement","fiberTag","useFiber","clone","createChild","created","updateElement","existing","updateSlot","oldFiber","deleteChild","childToDelete","last","newChildren","resultingFirstChild","previousNewFiber","newIdx","newFiber","_newFiber","nextState","prevChildren","isDirectTextChild","markUpdate","appendAllChildren","parent","completeWork","updatePayload","_instance","siblingFiber","commitRoot","getHostParentFiber","isHostParent","commitPlacement","parentFiber","commitWork","commitUnmount","componentWillUnmount","commitNestedUnmounts","commitDeletion","commitAllHostEffects","commitBeforeMutationLifeCycles","getSnapshotBeforeUpdate","prevProps","snapshot","__reactInternalSnapshotBeforeUpdate","commitAllLifeCycles","componentDidMount","dispatchEventWithBatch","nativeEvent","previousIsBatchingInteractiveUpdates","previousIsBatchingUpdates","previousIsDispatchControlledEvent","dispatchEvent","listeners","nativeEventTarget","target","srcElement","targetInst","internalInstanceKey","accumulateDirectionalDispatches","listener","acc","phase","registrationName","internalEventHandlersKey","customRenderer","Date","internalInstanceHandle","domElement","document","propValue","propKey","textContent","style","styleValue","styleName","setProperty","setAttribute","toLocaleLowerCase","endsWith","addEventListener","parentInstance","appendChild","removeChild","callback","options","requestIdleCallback","styleUpdates","nextProp","lastProp","hasOwnProperty","CustomDom","reactElement","_reactRootContainer","isConcurrent","App","onChange","onClick","divs","inputValue","e","setState","getElementById"],"mappings":"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","file":"src.4b721b38.map","sourceRoot":"../src","sourcesContent":["class ReactElement {\n  constructor (type, props) {\n    this.type = type\n    this.props = props\n  }\n}\n\nexport function createElement(type, config, children) {\n  const props = {}\n  if (config !== null) {\n    Object.keys(config).forEach(propName => \n      props[propName] = config[propName])\n  }\n  // if (children.length >= 1) {\n  //   props.children = children.length === 1 ? children[0] : children\n  // }\n  const childrenLength = arguments.length - 2\n  if (childrenLength === 1) {\n    props.children = children\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray\n  }\n  return new ReactElement(type, props)\n}","export class Component {\n  constructor (props) {\n    this.props = props\n    this.updater = {}\n  }\n  setState (partialState) {\n    this.updater.enqueueSetState(this, partialState)\n  }\n}","import { createElement } from './ReactElement'\nimport { Component } from './ReactComponent'\n\nconst React = {\n  Component,\n  createElement,\n  Suspense: Symbol.for('react.suspense')\n}\n\nexport default React","export const NoWork = 0\nexport const Sync = 1\n\nconst UNIT_SIZE = 10\nconst MAGIC_NUMBER_OFFSET = 2\n\n// 1 unit of expiration time represents 10ms.\nexport function msToExpirationTime(ms) {\n  // Always add an offset so that we don't clash with the magic number for NoWork.\n  return ((ms / UNIT_SIZE) | 0) + MAGIC_NUMBER_OFFSET\n}\n\nexport function expirationTimeToMs(expirationTime) {\n  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE\n}\n\nfunction ceiling(num, precision) {\n  return (((num / precision) | 0) + 1) * precision\n}\n\nfunction computeExpirationBucket(\n  currentTime,\n  expirationInMs,\n  bucketSizeMs,\n) {\n  return (\n    MAGIC_NUMBER_OFFSET +\n    ceiling(\n      currentTime - MAGIC_NUMBER_OFFSET + expirationInMs / UNIT_SIZE,\n      bucketSizeMs / UNIT_SIZE,\n    )\n  )\n}\n\nexport const LOW_PRIORITY_EXPIRATION = 5000\nexport const LOW_PRIORITY_BATCH_SIZE = 250\n\nexport function computeAsyncExpiration (currentTime) {\n  return computeExpirationBucket(\n    currentTime,\n    LOW_PRIORITY_EXPIRATION,\n    LOW_PRIORITY_BATCH_SIZE,\n  )\n}\n\n// We intentionally set a higher expiration time for interactive updates in\n// dev than in production.\n//\n// If the main thread is being blocked so long that you hit the expiration,\n// it's a problem that could be solved with better scheduling.\n//\n// People will be more likely to notice this and fix it with the long\n// expiration time in development.\n//\n// In production we opt for better UX at the risk of masking scheduling\n// problems, by expiring fast.\nexport const HIGH_PRIORITY_EXPIRATION = 500\nexport const HIGH_PRIORITY_BATCH_SIZE = 100\n\nexport function computeInteractiveExpiration (currentTime) {\n  return computeExpirationBucket(\n    currentTime,\n    HIGH_PRIORITY_EXPIRATION,\n    HIGH_PRIORITY_BATCH_SIZE,\n  )\n}","import {NoWork} from './ReactFiberExpirationTime'\n// Assume when processing the updateQueue, process all updates together\nclass UpdateQueue {\n  constructor (baseState) {\n    this.baseState = baseState\n    this.firstUpdate = null\n    this.lastUpdate = null\n  }\n}\n\nclass Update {\n  constructor () {\n    this.payload = null\n    this.next = null\n  }\n}\n\nexport function createUpdate () {\n  return new Update()\n}\n\nfunction appendUpdateToQueue (queue, update) {\n  // Append the update to the end of the list.\n  if (queue.lastUpdate === null) {\n    // Queue is empty\n    queue.firstUpdate = queue.lastUpdate = update\n  } else {\n    queue.lastUpdate.next = update\n    queue.lastUpdate = update\n  }\n}\n\nexport function enqueueUpdate (fiber, update) {\n  // Update queues are created lazily.\n  let queue = fiber.updateQueue\n  if (queue === null) {\n    queue = fiber.updateQueue = new UpdateQueue(fiber.memoizedState)\n  }\n  appendUpdateToQueue(queue, update)\n}\n\nfunction getStateFromUpdate (update, prevState) {\n  const partialState = update.payload\n  if (partialState === null || partialState === undefined) {\n    // Null and undefined are treated as no-ops.\n    return prevState\n  }\n  // Merge the partial state and the previous state.\n  return Object.assign({}, prevState, partialState)\n}\n\nexport function processUpdateQueue (workInProgress, queue) {\n  // Iterate through the list of updates to compute the result.\n  let update = queue.firstUpdate\n  let resultState = queue.baseState\n  while (update !== null) {\n    resultState = getStateFromUpdate(update, resultState)\n    update = update.next\n  }\n  queue.baseState = resultState\n  queue.firstUpdate = queue.lastUpdate = null\n  workInProgress.expirationTime = NoWork\n  workInProgress.memoizedState = resultState\n}\n","// Don't change these two values. They're used by React Dev Tools.\nexport const NoEffect = /*              */ 0b00000000000;\nexport const PerformedWork = /*         */ 0b00000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*             */ 0b00000000010;\nexport const Update = /*                */ 0b00000000100;\nexport const PlacementAndUpdate = /*    */ 0b00000000110;\nexport const Deletion = /*              */ 0b00000001000;\nexport const ContentReset = /*          */ 0b00000010000;\nexport const Callback = /*              */ 0b00000100000;\nexport const DidCapture = /*            */ 0b00001000000;\nexport const Ref = /*                   */ 0b00010000000;\nexport const Snapshot = /*              */ 0b00100000000;\n\n// Update & Callback & Ref & Snapshot\nexport const LifecycleEffectMask = /*   */ 0b00110100100;\n\n// Union of all host effects\nexport const HostEffectMask = /*        */ 0b00111111111;\n\nexport const Incomplete = /*            */ 0b01000000000;\nexport const ShouldCapture = /*         */ 0b10000000000;","export const FunctionalComponent = 0;\nexport const FunctionalComponentLazy = 1;\nexport const ClassComponent = 2;\nexport const ClassComponentLazy = 3;\nexport const IndeterminateComponent = 4; // Before we know whether it is functional or class\nexport const HostRoot = 5; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 6; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 7;\nexport const HostText = 8;\nexport const Fragment = 9;\nexport const Mode = 10;\nexport const ContextConsumer = 11;\nexport const ContextProvider = 12;\nexport const ForwardRef = 13;\nexport const ForwardRefLazy = 14;\nexport const Profiler = 15;\nexport const SuspenseComponent = 16;","import { NoEffect } from '../shared/ReactSideEffectTags'\nimport { NoWork } from './ReactFiberExpirationTime'\nimport { HostRoot } from '../shared/ReactWorkTags'\n\nexport function FiberNode (tag, pendingProps) {\n  // Instance\n  // Tag identifying the type of fiber.\n  this.tag = tag\n  // Unique identifier of this child.\n  // this.key = key\n  // The function/class/module associated with this fiber.\n  this.type = null\n  // The local state associated with this fiber\n  this.stateNode = null\n\n  // Fiber\n  // The Fiber to return to after finishing processing this one.\n  // This is effectively the parent, but there can be multiple parents (two)\n  // so this is only the parent of the thing we're currently processing.\n  // It is conceptually the same as the return address of a stack frame.\n  this.return = null\n  // Singly Linked List Tree Structure.\n  this.child = null\n  this.sibling = null\n\n  // Input is the data coming into process this fiber. Arguments. Props.\n  this.pendingProps = pendingProps // This type will be more specific once we overload the tag.\n  this.memoizedProps = null // The props used to create the output\n\n  // A queue of state updates and callbacks.\n  this.updateQueue = null\n\n   // The state used to create the output\n  this.memoizedState = null\n\n  // Effects\n  this.effectTag = NoEffect\n  // Singly linked list fast path to the next fiber with side-effects.\n  this.nextEffect = null\n  // The first and last fiber with side-effect within this subtree. This allows\n  // us to reuse a slice of the linked list when we reuse the work done within\n  // this fiber.\n  this.firstEffect = null\n  this.lastEffect = null\n\n  // Represents a time in the future by which this work should be completed.\n  // Does not include work found in its subtree.\n  this.expirationTime = NoWork\n\n  // This is a pooled version of a Fiber. Every fiber that gets updated will\n  // eventually have a pair. There are cases when we can clean up pairs to save\n  // memory if we need to.\n  this.alternate = null\n}\n\nexport function createHostRootFiber () {\n  return new FiberNode(HostRoot, null)\n}\n\n","import { createHostRootFiber } from './ReactFiber'\nimport { NoWork } from './ReactFiberExpirationTime'\n\nexport function createFiberRoot (containerInfo) {\n  let uninitializedFiber = createHostRootFiber()\n  let root = {\n    // The currently active root fiber. This is the mutable root of the tree.\n    current: uninitializedFiber,\n    // Any additional information from the host associated with this root.\n    containerInfo: containerInfo,\n    // A finished work-in-progress HostRoot that's ready to be committed.\n    finishedWork: null,\n    expirationTime: NoWork\n  }\n  uninitializedFiber.stateNode = root\n  return root\n}","const interactiveEventTypeNames = [\n  'blur',\n  'cancel',\n  'click',\n  'close',\n  'contextMenu',\n  'copy',\n  'cut',\n  'auxClick',\n  'doubleClick',\n  'dragEnd',\n  'dragStart',\n  'drop',\n  'focus',\n  'input',\n  'invalid',\n  'keyDown',\n  'keyPress',\n  'keyUp',\n  'mouseDown',\n  'mouseUp',\n  'paste',\n  'pause',\n  'play',\n  'pointerCancel',\n  'pointerDown',\n  'pointerUp',\n  'rateChange',\n  'reset',\n  'seeked',\n  'submit',\n  'touchCancel',\n  'touchEnd',\n  'touchStart',\n  'volumeChange',\n]\n\nconst nonInteractiveEventTypeNames = [\n  'abort',\n  'animationEnd',\n  'animationIteration',\n  'animationStart',\n  'canPlay',\n  'canPlayThrough',\n  'drag',\n  'dragEnter',\n  'dragExit',\n  'dragLeave',\n  'dragOver',\n  'durationChange',\n  'emptied',\n  'encrypted',\n  'ended',\n  'error',\n  'gotPointerCapture',\n  'load',\n  'loadedData',\n  'loadedMetadata',\n  'loadStart',\n  'lostPointerCapture',\n  'mouseMove',\n  'mouseOut',\n  'mouseOver',\n  'playing',\n  'pointerMove',\n  'pointerOut',\n  'pointerOver',\n  'progress',\n  'scroll',\n  'seeking',\n  'stalled',\n  'suspend',\n  'timeUpdate',\n  'toggle',\n  'touchMove',\n  'transitionEnd',\n  'waiting',\n  'wheel',\n]\n\nexport const eventTypeNames = [...interactiveEventTypeNames, ...nonInteractiveEventTypeNames]\nexport const bubblePhaseRegistrationNames = eventTypeNames.map(\n  name => 'on' + name[0].toLocaleUpperCase() + name.slice(1)\n)\nexport const capturePhaseRegistrationNames = bubblePhaseRegistrationNames.map(\n  name => name + 'Capture'\n)\nexport const registrationNames = [...bubblePhaseRegistrationNames, ...capturePhaseRegistrationNames]\nexport function isInteractiveEvent (eventType) {\n  return interactiveEventTypeNames.includes(eventType)\n}","import {HostComponent} from './ReactWorkTags';\n\nfunction getParent(inst) {\n  do {\n    inst = inst.return;\n    // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent);\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nexport function traverseTwoPhase(inst, fn, arg) {\n  const path = [];\n  while (inst) {\n    path.push(inst);\n    inst = getParent(inst);\n  }\n  let i;\n  for (i = path.length; i-- > 0; ) {\n    fn(path[i], 'captured', arg);\n  }\n  for (i = 0; i < path.length; i++) {\n    fn(path[i], 'bubbled', arg);\n  }\n}","import {\n  NoWork,\n  Sync,\n  msToExpirationTime,\n  expirationTimeToMs,\n  computeAsyncExpiration,\n  computeInteractiveExpiration\n} from './ReactFiberExpirationTime'\nimport { createUpdate, enqueueUpdate, processUpdateQueue } from './ReactUpdateQueue'\nimport { createFiberRoot } from './ReactFiberRoot'\nimport { FiberNode } from './ReactFiber'\nimport { isInteractiveEvent } from '../event/isInteractiveEvent'\nimport {\n  ClassComponent,\n  HostRoot, \n  HostComponent,\n  SuspenseComponent,\n  Fragment,\n} from '../shared/ReactWorkTags'\nimport {\n  NoEffect,\n  Placement,\n  Update,\n  Deletion,\n  DidCapture,\n  Incomplete,\n} from '../shared/ReactSideEffectTags'\nimport { traverseTwoPhase } from '../shared/ReactTreeTraversal'\n\nfunction Reconciler (hostConfig) {\n  const now = hostConfig.now\n  const shouldSetTextContent = hostConfig.shouldSetTextContent\n  const createInstance = hostConfig.createInstance\n  const finalizeInitialChildren = hostConfig.finalizeInitialChildren\n  const appendInitialChild = hostConfig.appendInitialChild\n  const scheduleDeferredCallback = hostConfig.scheduleDeferredCallback\n  const prepareUpdate = hostConfig.prepareUpdate\n  const appendChildToContainer = hostConfig.appendChildToContainer\n  const removeChildFromContainer = hostConfig.removeChildFromContainer\n  const commitUpdate = hostConfig.commitUpdate\n\n\n  let scheduledRoot = null \n  let isRendering = false\n  let deadline = null\n  let deadlineDidExpire = false\n  let isBatchingInteractiveUpdates = false\n  let isBatchingUpdates = false\n  let isDispatchControlledEvent = false\n  let originalStartTimeMs = now()\n  let currentRendererTime = msToExpirationTime(originalStartTimeMs)\n  let currentSchedulerTime = currentRendererTime\n  let isWorking = false\n  let isCommitting = false\n  let nextUnitOfWork = null\n  let nextRenderExpirationTime = NoWork\n  let shouldTrackSideEffects = true\n  const timeHeuristicForUnitOfWork = 1\n\n  function createContainer (containerInfo) {\n    return createFiberRoot(containerInfo)\n  }\n\n  function updateContainer (element, container) {\n    const current = container.current\n    const currentTime = requestCurrentTime()\n    const expirationTime = computeExpirationForFiber(currentTime)\n    return scheduleRootUpdate(current, element, expirationTime)\n  }\n\n  function requestCurrentTime() {\n    // requestCurrentTime is called by the scheduler to compute an expiration\n    // time.\n    //\n    // Expiration times are computed by adding to the current time (the start\n    // time). However, if two updates are scheduled within the same event, we\n    // should treat their start times as simultaneous, even if the actual clock\n    // time has advanced between the first and second call.\n\n    // In other words, because expiration times determine how updates are batched,\n    // we want all updates of like priority that occur within the same event to\n    // receive the same expiration time. Otherwise we get tearing.\n    //\n    // We keep track of two separate times: the current \"renderer\" time and the\n    // current \"scheduler\" time. The renderer time can be updated whenever; it\n    // only exists to minimize the calls performance.now.\n    //\n    // But the scheduler time can only be updated if there's no pending work, or\n    // if we know for certain that we're not in the middle of an event.\n    if (isRendering) {    \n      return currentSchedulerTime\n    }\n    if (!scheduledRoot) { \n      recomputeCurrentRendererTime()\n      currentSchedulerTime = currentRendererTime\n      return currentSchedulerTime\n    }\n    return currentSchedulerTime\n  }\n\n  function recomputeCurrentRendererTime () {\n    let currentTimeMs = now() - originalStartTimeMs\n    currentRendererTime = msToExpirationTime(currentTimeMs)\n  }\n\n  function computeExpirationForFiber (currentTime) {\n    let expirationTime\n    if (isWorking) {\n      if (isCommitting) {   \n        expirationTime = Sync\n      } else { \n        expirationTime = nextRenderExpirationTime\n      }\n    } else {\n      if (isBatchingInteractiveUpdates) { \n        expirationTime = computeInteractiveExpiration(currentTime)\n      } else { \n        expirationTime = computeAsyncExpiration(currentTime)\n      }\n    }\n    return expirationTime\n  }\n\n  function scheduleRootUpdate (current, element, expirationTime) {\n    const update = createUpdate()\n    update.payload = {element}\n    enqueueUpdate(current, update)\n    scheduleWork(current, expirationTime)\n    return expirationTime\n  }\n  \n  function scheduleWorkToRoot (fiber, expirationTime) {\n    if (\n      fiber.expirationTime === NoWork ||\n      fiber.expirationTime > expirationTime\n    ) {\n      fiber.expirationTime = expirationTime\n    }\n    let alternate = fiber.alternate\n    if (\n      alternate !== null &&\n      (alternate.expirationTime === NoWork ||\n        alternate.expirationTime > expirationTime)\n    ) {\n      alternate.expirationTime = expirationTime\n    }\n    let node = fiber\n    while (node !== null) {\n      if (node.return === null && node.tag === HostRoot) {\n        return node.stateNode\n      }\n      node = node.return\n    }\n    return null\n  }\n\n  function scheduleWork (fiber, expirationTime) {\n    const root = scheduleWorkToRoot(fiber, expirationTime)\n    root.expirationTime = expirationTime\n    requestWork(root, expirationTime)\n  }\n\n  function requestWork (root, expirationTime) {\n    scheduledRoot = root\n    if (isRendering) {\n      return\n    }\n    if (isBatchingUpdates) { \n      return\n    }\n    if (expirationTime === Sync) {\n      performSyncWork()\n    } else {\n      scheduleCallbackWithExpirationTime(root, expirationTime)\n    }\n  }\n\n  function scheduleCallbackWithExpirationTime(root, expirationTime) {\n    const currentMs = now() - originalStartTimeMs\n    const expirationTimeMs = expirationTimeToMs(expirationTime)\n    const timeout = expirationTimeMs - currentMs\n    scheduleDeferredCallback(performAsyncWork, {timeout})\n  }\n\n  function performSyncWork() {\n    performWork(null)\n  }\n\n  function performAsyncWork (dl) {\n    performWork(dl)\n  }\n\n  function performWork (dl) {\n    deadline = dl\n    if (deadline !== null) {\n      recomputeCurrentRendererTime()\n      currentSchedulerTime = currentRendererTime\n      while (\n        scheduledRoot !== null &&\n        (!deadlineDidExpire || currentRendererTime >= scheduledRoot.expirationTime)\n      ) {\n        performWorkOnRoot(\n          scheduledRoot,\n          currentRendererTime >= scheduledRoot.expirationTime\n        )\n        recomputeCurrentRendererTime()\n        currentSchedulerTime = currentRendererTime\n      }\n    } else {\n      while (scheduledRoot !== null) {\n        performWorkOnRoot(scheduledRoot, true)\n      }\n    }\n    if (scheduledRoot) {\n      scheduleCallbackWithExpirationTime(\n        scheduledRoot,\n        scheduledRoot.expirationTime,\n      )\n    }\n    deadline = null\n    deadlineDidExpire = false\n  }\n\n\n  function shouldYield () {\n    if (deadlineDidExpire) {\n      return true\n    } \n    if (deadline === null || deadline.timeRemaining() > timeHeuristicForUnitOfWork) {  \n      return false\n    }\n    deadlineDidExpire = true\n    return true\n  }\n\n  function performWorkOnRoot(root, isExpired) {\n    isRendering = true\n    if (isExpired) { \n      let finishedWork = root.finishedWork\n      if (finishedWork !== null) {   \n        completeRoot(root, finishedWork)\n      } else {\n        root.finishedWork = null\n        const isYieldy = false\n        renderRoot(root, isYieldy)\n        finishedWork = root.finishedWork\n        if (finishedWork !== null) { \n          completeRoot(root, finishedWork)\n        }\n      }\n    } else {\n      let finishedWork = root.finishedWork\n      if (finishedWork !== null) {\n        completeRoot(root, finishedWork)\n      } else {\n        root.finishedWork = null\n        const isYieldy = true\n        renderRoot(root, isYieldy)\n        finishedWork = root.finishedWork\n        if (finishedWork !== null) {\n          if (!shouldYield()) {\n            completeRoot(root, finishedWork)\n          } else {\n            root.finishedWork = finishedWork\n          }\n        }\n      }\n    }\n    isRendering = false\n  }\n\n  function createWorkInProgress(current, pendingProps, expirationTime) {\n    let workInProgress = current.alternate\n    if (workInProgress === null) {\n      workInProgress = new FiberNode(current.tag, pendingProps)\n      workInProgress.type = current.type\n      workInProgress.stateNode = current.stateNode\n      workInProgress.alternate = current\n      current.alternate = workInProgress\n    } else {\n      workInProgress.pendingProps = pendingProps\n      workInProgress.effectTag = NoEffect\n      workInProgress.nextEffect = null\n      workInProgress.firstEffect = null\n      workInProgress.lastEffect = null\n    }\n    if (pendingProps !== current.pendingProps) {\n      workInProgress.expirationTime = expirationTime\n    } else {\n      workInProgress.expirationTime = current.expirationTime\n    }\n    workInProgress.child = current.child\n    workInProgress.memoizedProps = current.memoizedProps\n    workInProgress.memoizedState = current.memoizedState\n    workInProgress.updateQueue = current.updateQueue\n    workInProgress.sibling = current.sibling\n    return workInProgress\n  }\n\n  function renderRoot (root, isYieldy) {\n    isWorking = true\n    const expirationTime = root.expirationTime\n    if (expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {\n      nextRenderExpirationTime = expirationTime\n      nextUnitOfWork = createWorkInProgress(root.current, null, nextRenderExpirationTime)\n    }\n    do {\n      try {\n        workLoop(isYieldy)\n      } catch (thrownValue) {\n        const sourceFiber = nextUnitOfWork\n        const returnFiber = sourceFiber.return\n        throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime)\n        nextUnitOfWork = completeUnitOfWork(sourceFiber)\n        continue\n      }\n      break\n    } while (true) \n    isWorking = false\n    if (nextUnitOfWork !== null) {\n      return\n    }\n    root.finishedWork = root.current.alternate\n  }\n\n  function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {\n    sourceFiber.effectTag |= Incomplete\n    sourceFiber.firstEffect = sourceFiber.lastEffect = null\n    if (\n      value !== null &&\n      typeof value === 'object' &&\n      typeof value.then === 'function'\n    ) {\n      const thenable = value\n      let workInProgress = returnFiber\n      do {\n        if (workInProgress.tag === SuspenseComponent) {\n          const onResolve = retrySuspendedRoot.bind(\n            null,\n            root,\n            workInProgress\n          )\n          thenable.then(onResolve)\n          workInProgress.expirationTime = renderExpirationTime\n          return\n        }\n        workInProgress = workInProgress.return\n      } while (workInProgress !== null)\n    }\n  }\n  \n  function retrySuspendedRoot (root, fiber) {\n    const currentTime = requestCurrentTime()\n    const retryTime = computeExpirationForFiber(currentTime)\n    root.expirationTime = retryTime\n    scheduleWorkToRoot(fiber, retryTime)\n    requestWork(root, root.expirationTime)\n  }\n\n  function workLoop (isYieldy) {\n    if (!isYieldy) {\n      while (nextUnitOfWork !== null) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork)\n      }\n    } else {  \n      while (nextUnitOfWork !== null && !shouldYield()) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork)\n      }\n    }\n  }\n\n  function performUnitOfWork (workInProgress) {\n    const current = workInProgress.alternate\n    let next = null\n    next = beginWork(current, workInProgress, nextRenderExpirationTime)\n    if (next === null) {\n      next = completeUnitOfWork(workInProgress)\n    }\n    return next\n  }\n\n  function beginWork (current, workInProgress, renderExpirationTime) {\n    workInProgress.expirationTime = NoWork\n    const Component = workInProgress.type\n    const unresolvedProps = workInProgress.pendingProps\n    switch (workInProgress.tag) {\n      case ClassComponent: {\n        return updateClassComponent(current, workInProgress, Component, unresolvedProps, renderExpirationTime)\n      }\n      case HostRoot: {\n        return updateHostRoot(current, workInProgress, renderExpirationTime)\n      }\n      case HostComponent: {\n        return updateHostComponent(current, workInProgress, renderExpirationTime)\n      }\n      case Fragment: {\n        return updateFragment(current, workInProgress, renderExpirationTime)\n      }\n      case SuspenseComponent: {\n        return updateSuspenseComponent(current, workInProgress, renderExpirationTime)\n      }\n      default:\n        throw new Error('unknown unit of work tag') \n    }\n  }\n\n  function updateFragment(current, workInProgress, renderExpirationTime) {\n    var nextChildren = workInProgress.pendingProps\n    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime)\n    return workInProgress.child\n  }\n\n  function updateSuspenseComponent (current, workInProgress, renderExpirationTime) {\n    const nextProps = workInProgress.pendingProps\n    const nextDidTimeout = (workInProgress.effectTag & DidCapture) !== NoEffect\n    const nextChildren = nextDidTimeout ? nextProps.fallback : nextProps.children\n    workInProgress.memoizedProps = nextProps\n    workInProgress.memoizedState = nextDidTimeout\n    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime)\n    return workInProgress.child\n  }\n\n  function get(key) {\n    return key._reactInternalFiber\n  }\n\n  function set(key, value) {\n    key._reactInternalFiber = value\n  }\n\n  const classComponentUpdater = {\n    enqueueSetState: function (inst, payload) {\n      const fiber = get(inst)\n      const currentTime = requestCurrentTime()\n      const expirationTime = computeExpirationForFiber(currentTime)\n      const update = createUpdate()\n      update.payload = payload\n      enqueueUpdate(fiber, update)\n      scheduleWork(fiber, expirationTime)\n    }\n  }\n  function adoptClassInstance (workInProgress, instance) {\n    instance.updater = classComponentUpdater\n    workInProgress.stateNode = instance\n    set(instance, workInProgress)\n  }\n\n  function constructClassInstance (workInProgress, ctor, props) {\n    let instance =  new ctor(props)\n    workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null\n    adoptClassInstance(workInProgress, instance)\n    return instance\n  }\n\n  function applyDerivedStateFromProps (workInProgress, getDerivedStateFromProps, nextProps) {\n    const prevState = workInProgress.memoizedState\n    const partialState = getDerivedStateFromProps(nextProps, prevState)\n    const memoizedState = partialState === null || partialState === undefined ? prevState : Object.assign({}, prevState, partialState)\n    workInProgress.memoizedState = memoizedState\n    const updateQueue = workInProgress.updateQueue\n    if (updateQueue !== null && workInProgress.expirationTime === NoWork) {\n      updateQueue.baseState = memoizedState\n    }\n  }\n  \n  function mountClassInstance(workInProgress, ctor, newProps) {\n    let instance = workInProgress.stateNode\n    instance.props = newProps\n    instance.state = workInProgress.memoizedState\n    const updateQueue = workInProgress.updateQueue\n    if (updateQueue !== null) {\n      processUpdateQueue(workInProgress, updateQueue)\n      instance.state = workInProgress.memoizedState\n    }\n    const getDerivedStateFromProps = ctor.getDerivedStateFromProps\n    if (typeof getDerivedStateFromProps === 'function') {\n      applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, newProps)\n      instance.state = workInProgress.memoizedState\n    }\n  }\n  \n  function checkShouldComponentUpdate(workInProgress, newProps, newState) {\n    const instance = workInProgress.stateNode\n    if (typeof instance.shouldComponentUpdate === 'function') {\n      const shouldUpdate = instance.shouldComponentUpdate(newProps, newState)\n      return shouldUpdate\n    }\n    return true\n  }\n  \n  function updateClassInstance (current, workInProgress, ctor, newProps) {\n    const instance = workInProgress.stateNode\n    const oldProps = workInProgress.memoizedProps\n    instance.props = oldProps\n    const oldState = workInProgress.memoizedState\n    let newState = instance.state = oldState\n    let updateQueue = workInProgress.updateQueue\n    if (updateQueue !== null) {\n      processUpdateQueue(\n        workInProgress,\n        updateQueue\n      )\n      newState = workInProgress.memoizedState\n    }\n    if (oldProps === newProps && oldState === newState) {\n      return false\n    }\n    const getDerivedStateFromProps = ctor.getDerivedStateFromProps\n    if (typeof getDerivedStateFromProps === 'function') {\n      applyDerivedStateFromProps(workInProgress, getDerivedStateFromProps, newProps)\n      newState = workInProgress.memoizedState\n    }\n    const shouldUpdate = checkShouldComponentUpdate(workInProgress, newProps, newState)\n    if (shouldUpdate) {\n      if (typeof instance.componentDidUpdate === 'function') {\n        workInProgress.effectTag |= Update\n      }\n    }\n    instance.props = newProps\n    instance.state = newState\n    return shouldUpdate\n  }\n\n  function updateClassComponent (current, workInProgress, Component, nextProps, renderExpirationTime) {\n    let shouldUpdate\n    if (current === null) {\n      constructClassInstance(workInProgress, Component, nextProps)\n      mountClassInstance(workInProgress, Component, nextProps)\n      shouldUpdate = true\n    } else {\n      shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps)\n    }\n    return finishClassComponent(current, workInProgress, shouldUpdate, renderExpirationTime)\n  }\n\n  function cloneChildFibers(workInProgress) {\n    if (workInProgress.child === null) {\n      return\n    }\n    let currentChild = workInProgress.child\n    let newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime)\n    workInProgress.child = newChild\n    newChild.return = workInProgress\n    while (currentChild.sibling !== null) {\n      currentChild = currentChild.sibling\n      newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime)\n      newChild.return = workInProgress\n    }\n    newChild.sibling = null\n  }\n\n  function finishClassComponent (current, workInProgress, shouldUpdate, renderExpirationTime) {\n    if (!shouldUpdate) {\n      cloneChildFibers(workInProgress)\n    } else {\n      const instance = workInProgress.stateNode\n      const nextChildren = instance.render()\n      reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime)\n      memoizeState(workInProgress, instance.state)\n      memoizeProps(workInProgress, instance.props)\n    }\n    return workInProgress.child\n  }\n\n  function reconcileChildren (current, workInProgress, nextChildren, renderExpirationTime) {\n    if (current === null) {\n      shouldTrackSideEffects = false\n      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime)\n    } else {\n      shouldTrackSideEffects = true\n      workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime)\n    }\n  }\n\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {\n    if (newChild) {\n      const childArray = Array.isArray(newChild) ? newChild : [newChild]\n      return reconcileChildrenArray(returnFiber, currentFirstChild, childArray, expirationTime)\n    } else {\n      return null\n    }\n  }\n\n  function createFiberFromFragment(element, expirationTime) {\n    var pendingProps = element\n    var fiber = new FiberNode(Fragment, pendingProps);\n    fiber.type = element.type\n    fiber.expirationTime = expirationTime;\n    return fiber\n  }\n\n  function createFiberFromElement (element, expirationTime) {\n    let fiber\n    const type = element.type\n    const pendingProps = element.props\n    let fiberTag\n    if (typeof type === 'function') {\n      fiberTag = ClassComponent\n    } else if (typeof type === 'string') {\n      fiberTag = HostComponent\n    }else {\n      fiberTag = SuspenseComponent\n    }\n    fiber = new FiberNode(fiberTag, pendingProps)\n    fiber.type = type\n    fiber.expirationTime = expirationTime\n    return fiber\n  }\n\n  function useFiber (fiber, pendingProps, expirationTime) {\n    let clone = createWorkInProgress(fiber, pendingProps, expirationTime)\n    clone.sibling = null\n    return clone\n  }\n  \n  function createChild (returnFiber, newChild, expirationTime) {\n    if (newChild instanceof Array) {\n      var created = createFiberFromFragment(newChild, expirationTime)\n      created.return = returnFiber;\n      return created;\n    }\n    if (typeof newChild === 'object' && newChild !== null) {\n      let created = createFiberFromElement(newChild, expirationTime)\n      created.return = returnFiber\n      return created\n    }\n    return null\n  }\n\n  function updateElement (returnFiber, current, element, expirationTime) {\n    if (current !== null && current.type === element.type) {\n      const existing = useFiber(current, element.props, expirationTime)\n      existing.return = returnFiber\n      return existing\n    } else {\n      const created = createFiberFromElement(element, expirationTime)\n      created.return = returnFiber\n      return created\n    } \n  }\n\n  function updateSlot (returnFiber, oldFiber, newChild, expirationTime) {\n    if (newChild instanceof Array) {\n      if (oldFiber === null || oldFiber.tag !== Fragment) {\n        // Insert\n        var created = createFiberFromFragment(newChild, expirationTime);\n        created.return = returnFiber;\n        return created;\n      } else {\n        // Update\n        var existing = useFiber(oldFiber, newChild, expirationTime);\n        existing.return = returnFiber;\n        return existing;\n      }\n    }\n    if (typeof newChild === 'object' && newChild !== null) {\n      return updateElement(returnFiber, oldFiber, newChild, expirationTime)\n    }\n    return null\n  }\n\n  function deleteChild (returnFiber, childToDelete) {\n    const last = returnFiber.lastEffect\n    if (last !== null) {\n      last.nextEffect = childToDelete\n      returnFiber.lastEffect = childToDelete\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete\n    }\n    childToDelete.nextEffect = null\n    childToDelete.effectTag = Deletion\n  }\n\n  function reconcileChildrenArray (returnFiber, currentFirstChild, newChildren, expirationTime) {\n    let resultingFirstChild = null\n    let previousNewFiber = null\n    let oldFiber = currentFirstChild\n    let newIdx = 0\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx ++) {\n      let newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime)\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          deleteChild(returnFiber, oldFiber)\n          newFiber.effectTag = Placement\n        }\n      }\n      if (resultingFirstChild === null) {\n        resultingFirstChild = newFiber\n      } else {\n        previousNewFiber.sibling = newFiber\n      }\n      previousNewFiber = newFiber\n      oldFiber = oldFiber.sibling\n    }\n    if (oldFiber === null) {\n      for (; newIdx < newChildren.length; newIdx++) {\n        let _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime)\n        if (shouldTrackSideEffects && _newFiber.alternate === null) {\n          _newFiber.effectTag = Placement\n        }     \n        if (resultingFirstChild === null) {\n          resultingFirstChild = _newFiber\n        } else {\n          previousNewFiber.sibling = _newFiber\n        }\n        previousNewFiber = _newFiber\n      }\n      return resultingFirstChild\n    }\n  }\n\n  function memoizeProps(workInProgress, nextProps) {\n    workInProgress.memoizedProps = nextProps\n  }\n\n  function memoizeState(workInProgress, nextState) {\n    workInProgress.memoizedState = nextState\n  }\n\n  function updateHostRoot (current, workInProgress, renderExpirationTime) {\n    const updateQueue = workInProgress.updateQueue\n    const prevState = workInProgress.memoizedState\n    const prevChildren = prevState !== null ? prevState.element : null\n    processUpdateQueue(workInProgress, updateQueue)\n    const nextState = workInProgress.memoizedState\n    const nextChildren = nextState.element\n    if (nextChildren === prevChildren) {\n      cloneChildFibers(workInProgress)\n      return workInProgress.child\n    }\n    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime)\n    return workInProgress.child\n  }\n\n  function updateHostComponent (current, workInProgress, renderExpirationTime) {\n    const nextProps = workInProgress.pendingProps\n    let nextChildren = nextProps.children\n    const isDirectTextChild = shouldSetTextContent(nextProps)\n    if (isDirectTextChild) {\n      nextChildren = null\n    }\n    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime)\n    memoizeProps(workInProgress, nextProps)\n    return workInProgress.child\n  }\n\n  function markUpdate(workInProgress) {\n    workInProgress.effectTag |= Update\n  }  \n\n  function appendAllChildren (parent, workInProgress) {\n    let node = workInProgress.child\n    while (node !== null) {\n      if (node.tag === HostComponent) {\n        appendInitialChild(parent, node.stateNode)\n      } else if (node.child !== null) {\n        node.child.return = node\n        node = node.child\n        continue\n      }\n      if (node ===  workInProgress) {\n        return\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return\n        }\n        node = node.return\n      }\n      node.sibling.return = node.return\n      node = node.sibling\n    }\n  }\n\n  function completeWork (current, workInProgress) {\n    const newProps = workInProgress.pendingProps\n    switch(workInProgress.tag) {\n      case ClassComponent: {\n        break\n      }\n      case HostRoot: {\n        break\n      }\n      case HostComponent: {\n        const type = workInProgress.type\n        if (current !== null && workInProgress.stateNode != null) {\n          const oldProps = current.memoizedProps\n          const updatePayload = prepareUpdate(oldProps, newProps)\n          workInProgress.updateQueue = updatePayload\n          if (updatePayload) {\n            markUpdate(workInProgress)\n          }\n        } else {\n          const _instance = createInstance(type, newProps, workInProgress)\n          appendAllChildren(_instance, workInProgress)\n          finalizeInitialChildren(_instance, newProps)\n          workInProgress.stateNode = _instance\n        }\n        break\n      }\n      case SuspenseComponent:\n      case Fragment: {\n        break\n      }\n      default: {\n        throw new Error('Unknown unit of work tag')\n      }\n    }\n    return null\n  }\n\n  function completeUnitOfWork (workInProgress) {\n    while (true) {\n      const current = workInProgress.alternate\n      const returnFiber = workInProgress.return\n      const siblingFiber = workInProgress.sibling\n      if ((workInProgress.effectTag & Incomplete) === NoEffect) {\n        completeWork(current, workInProgress)\n        if (returnFiber !== null &&\n          (returnFiber.effectTag & Incomplete) === NoEffect) {\n          if (returnFiber.firstEffect === null) {\n            returnFiber.firstEffect = workInProgress.firstEffect\n          }\n          if (workInProgress.lastEffect !== null) {\n            if (returnFiber.lastEffect !== null) {\n              returnFiber.lastEffect.nextEffect = workInProgress.firstEffect\n            }\n            returnFiber.lastEffect = workInProgress.lastEffect\n          }\n          const effectTag = workInProgress.effectTag\n          if (effectTag >= Placement) {\n            if (returnFiber.lastEffect !== null) {\n              returnFiber.lastEffect.nextEffect = workInProgress\n            } else {\n              returnFiber.firstEffect = workInProgress\n            }\n            returnFiber.lastEffect = workInProgress\n          }\n        }\n        if (siblingFiber !== null) {\n          return siblingFiber\n        } else if (returnFiber !== null) {\n          workInProgress = returnFiber\n          continue\n        } else {\n          return null\n        }\n      } else {\n        if (workInProgress.tag === SuspenseComponent) {\n          const effectTag = workInProgress.effectTag\n          workInProgress.effectTag = effectTag & ~Incomplete | DidCapture\n          return workInProgress\n        }\n        if (returnFiber !== null) {\n          returnFiber.firstEffect = returnFiber.lastEffect = null\n          returnFiber.effectTag |= Incomplete\n        }\n        if (siblingFiber !== null) {\n          return siblingFiber\n        } else if (returnFiber !== null) {\n          workInProgress = returnFiber\n          continue\n        } else {\n          return null\n        }\n      }\n    }\n  }\n\n  function completeRoot(root, finishedWork) {\n    root.finishedWork = null\n    scheduledRoot = null\n    commitRoot(root, finishedWork)\n  }\n\n  function getHostParentFiber(fiber) {\n    let parent = fiber.return\n    while (parent !== null) {\n      if (isHostParent(parent)) {\n        return parent\n      }\n      parent = parent.return\n    }\n  }\n\n  function isHostParent(fiber) {\n    return fiber.tag === HostComponent || fiber.tag === HostRoot\n  }\n\n  function commitPlacement (finishedWork) {\n    const parentFiber = getHostParentFiber(finishedWork)\n    const parent = parentFiber.tag === HostRoot ? parentFiber.stateNode.containerInfo : parentFiber.stateNode\n    let node = finishedWork\n    while (true) {\n      if (node.tag === HostComponent) {\n        appendChildToContainer(parent, node.stateNode)\n      } else if (node.child !== null) {\n        node.child.return = node\n        node = node.child\n        continue\n      }\n      if (node === finishedWork) {\n        return\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return\n        }\n        node = node.return\n      }\n      node.sibling.return = node.return\n      node = node.sibling\n    }\n  }\n\n  function commitWork (finishedWork) {\n    switch (finishedWork.tag) {\n      case HostRoot: \n      case ClassComponent: {\n        return\n      }\n      case HostComponent: {\n        const instance = finishedWork.stateNode\n        if (instance != null) {\n          const updatePayload = finishedWork.updateQueue\n          finishedWork.updateQueue = null\n          if (updatePayload !== null) {\n            commitUpdate(instance, updatePayload)\n          }\n        }\n        return\n      }\n      case SuspenseComponent: {\n        return\n      }\n      default: {\n        throw new Error('This unit of work tag should not have side-effects')\n      }\n    }\n  }\n\n  function commitUnmount (current) {\n    if (current.tag === ClassComponent) {\n      const instance = current.stateNode\n      if (typeof instance.componentWillUnmount === 'function') {\n        instance.props = current.memoizedProps\n        instance.state = current.memoizedState\n        instance.componentWillUnmount()\n      }\n    }\n  }\n  \n  function commitNestedUnmounts (root) {\n    let node = root\n    while (true) {\n      commitUnmount(node)\n      if (node.child !== null) {\n        node.child.return = node\n        node = node.child\n        continue\n      }\n      if (node === root) {\n        return\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === root) {\n          return\n        }\n        node = node.return\n      }\n      node.sibling.return = node.return\n      node = node.sibling\n    }\n  }\n  \n  function commitDeletion (current) {\n    const parentFiber = getHostParentFiber(current)\n    const parent = parentFiber.tag === HostRoot ? parentFiber.stateNode.containerInfo : parentFiber.stateNode\n    let node = current\n    while (true) {\n      if (node.tag === HostComponent) {\n        commitNestedUnmounts(node)\n        removeChildFromContainer(parent, node.stateNode) \n      } else {\n        commitUnmount(node)\n        if (node.child !== null) {\n          node.child.return = node\n          node = node.child\n          continue\n        }\n      }   \n      if (node === current) {\n        break\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === current) {\n          break\n        }\n        node = node.return\n      }\n      node.sibling.return = node.return\n      node = node.sibling\n    }\n    current.return = null\n    current.child = null\n    if (current.alternate) {\n      current.alternate.child = null\n      current.alternate.return = null\n    }\n  }\n\n  function commitAllHostEffects (firstEffect) {\n    let nextEffect = firstEffect\n    while (nextEffect !== null) {\n      const effectTag = nextEffect.effectTag\n      switch(effectTag & (Placement | Update | Deletion)) {\n        case Placement: {\n          commitPlacement(nextEffect)\n          nextEffect.effectTag &= ~Placement\n          break\n        }\n        case Update: {\n          commitWork(nextEffect)\n          break\n        }\n        case Deletion: {\n          commitDeletion(nextEffect)\n          break\n        }\n      }\n      nextEffect = nextEffect.nextEffect\n    }    \n  }\n\n  function commitBeforeMutationLifeCycles (firstEffect) {\n    let nextEffect = firstEffect \n    while (nextEffect !== null) {\n      if (nextEffect.tag === ClassComponent) {\n        const instance = nextEffect.stateNode\n        const getSnapshotBeforeUpdate = nextEffect.stateNode.getSnapshotBeforeUpdate\n        if (typeof getSnapshotBeforeUpdate === 'function') {\n          const current = nextEffect.alternate\n          const prevProps = current.memoizedProps\n          const prevState = current.memoizedState\n          instance.props = nextEffect.memoizedProps\n          instance.state = nextEffect.memoizedState\n          const snapshot = getSnapshotBeforeUpdate(prevProps, prevState)\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot\n        }\n      }    \n      nextEffect = nextEffect.nextEffect\n    }\n  }\n  \n  function commitAllLifeCycles (firstEffect) {\n    let nextEffect = firstEffect \n    while (nextEffect !== null) {\n      if (nextEffect.tag === ClassComponent) {\n        const instance = nextEffect.stateNode\n        const componentDidMount = instance.componentDidMount\n        const componentDidUpdate = instance.componentDidUpdate\n        const current = nextEffect.alternate\n        if (current === null) {\n          if (typeof componentDidMount === 'function') {\n            instance.props = nextEffect.memoizedProps\n            instance.state = nextEffect.memoizedState\n            instance.componentDidMount()\n          }\n        } else {\n          if (typeof componentDidUpdate === 'function') {\n            const prevProps = current.memoizedProps\n            const prevState = current.memoizedState\n            instance.props = nextEffect.memoizedProps\n            instance.state = nextEffect.memoizedState\n            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate)\n          }\n        }\n      }    \n      nextEffect = nextEffect.nextEffect\n    }\n  }\n  \n  function commitRoot(root, finishedWork) {\n    isWorking = true\n    isCommitting = true\n    root.expirationTime = NoWork\n    const firstEffect = finishedWork.firstEffect\n    commitBeforeMutationLifeCycles(firstEffect)\n    commitAllHostEffects(firstEffect)\n    root.current = finishedWork\n    commitAllLifeCycles(firstEffect)\n    isCommitting = false\n    isWorking = false\n  }\n\n  function dispatchEventWithBatch (nativeEvent) {\n    const type = nativeEvent.type\n    let previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates\n    let previousIsBatchingUpdates = isBatchingUpdates\n    let previousIsDispatchControlledEvent = isDispatchControlledEvent\n    if (type === 'change') {\n      isDispatchControlledEvent = true\n    }\n    if (isInteractiveEvent(type)) {\n      isBatchingInteractiveUpdates = true\n    }\n    isBatchingUpdates = true\n    \n    try {\n      return dispatchEvent(nativeEvent) \n    } finally {\n      isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates\n      isBatchingUpdates = previousIsBatchingUpdates\n      if (!isBatchingUpdates && !isRendering) {\n        if (isDispatchControlledEvent) {\n          isDispatchControlledEvent = previousIsDispatchControlledEvent\n          if (scheduledRoot) {\n            performSyncWork()\n          }  \n        } else {\n          if (scheduledRoot) {\n            scheduleCallbackWithExpirationTime(scheduledRoot, scheduledRoot.expirationTime)\n          }\n        }\n      }\n    }\n  }\n  \n  function dispatchEvent (nativeEvent) {\n    let listeners = []\n    const nativeEventTarget = nativeEvent.target || nativeEvent.srcElement\n    const targetInst = nativeEventTarget.internalInstanceKey\n    traverseTwoPhase(targetInst, accumulateDirectionalDispatches.bind(null, listeners), nativeEvent)\n    listeners.forEach(listener => listener(nativeEvent))\n  }\n  \n  function accumulateDirectionalDispatches (acc, inst, phase, nativeEvent) {\n    let type = nativeEvent.type\n    let registrationName = 'on' + type[0].toLocaleUpperCase() + type.slice(1)\n    if (phase === 'captured') {\n      registrationName = registrationName + 'Capture'\n    }\n    const stateNode = inst.stateNode\n    const props = stateNode.internalEventHandlersKey\n    const listener = props[registrationName]\n    if (listener) {\n      acc.push(listener)\n    }\n  }\n\n  return {\n    createContainer,\n    updateContainer,\n    dispatchEventWithBatch\n  }\n}\n\nexport default Reconciler","import ReactReconciler from './reconciler/Reconciler'\nimport { registrationNames } from './event/isInteractiveEvent'\n\nlet customRenderer\n\nconst hostConfig = {\n  now: () => {\n    // return performance.now\n    return Date.now()\n  },\n  shouldSetTextContent: (props) => {\n    return typeof props.children === 'string' || typeof props.children === 'number'\n  },\n  createInstance: (type, props, internalInstanceHandle) => {\n    const domElement = document.createElement(type)\n    domElement.internalInstanceKey = internalInstanceHandle\n    domElement.internalEventHandlersKey = props\n    return domElement\n  },\n  finalizeInitialChildren: (domElement, props) => {\n    Object.keys(props).forEach(propKey => {\n      const propValue = props[propKey]\n      if (propKey === 'children') {\n        if (typeof propValue === 'string' || typeof propValue === 'number') {\n          domElement.textContent = propValue\n        }\n      } else if (propKey === 'style') {\n        const style = domElement.style\n        Object.keys(propValue).forEach(styleName => {\n          let styleValue = propValue[styleName]\n          style.setProperty(styleName, styleValue)\n        })\n      } else if (propKey === 'className') {\n        domElement.setAttribute('class', propValue)\n      } else if (registrationNames.includes(propKey) || propKey === 'onChange') {\n        let eventType = propKey.slice(2).toLocaleLowerCase()\n        if (eventType.endsWith('capture')) {\n          eventType = eventType.slice(0, -7)\n        }\n        document.addEventListener(eventType, customRenderer.dispatchEventWithBatch)\n      } else {\n        const propValue = props[propKey]\n        domElement.setAttribute(propKey, propValue)\n      }\n    })\n  },\n  appendInitialChild: (parentInstance, child) => {\n    parentInstance.appendChild(child)\n  },\n  appendChildToContainer: (container, child) => {\n    container.appendChild(child)\n  },\n  removeChildFromContainer: (container, child) => {\n    container.removeChild(child)\n  },\n  scheduleDeferredCallback: (callback, options) => {\n    requestIdleCallback(callback, options)\n  },\n  prepareUpdate: (oldProps, newProps) => {\n    let updatePayload = null\n    let styleUpdates = null\n    Object.keys(newProps).forEach(propKey => {\n      let nextProp = newProps[propKey]\n      let lastProp = oldProps[propKey]\n      if (nextProp !== lastProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {\n        (updatePayload = updatePayload || []).push(propKey, '' + nextProp)\n      }\n      if (propKey === 'style') {\n        for (let styleName in nextProp) {\n          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {\n            styleUpdates = nextProp\n            break\n          }\n        }\n        if (styleUpdates) {\n          (updatePayload = updatePayload || []).push(propKey, styleUpdates)\n        }\n      }\n    })\n    return updatePayload\n  },\n  commitUpdate: (domElement, updatePayload) => {\n    for (let i = 0; i < updatePayload.length; i += 2) {\n      let propKey = updatePayload[i]\n      let propValue = updatePayload[i + 1]\n      if (propKey === 'children') {\n        domElement.textContent = propValue\n      } else if (propKey === 'style'){\n        const style = domElement.style\n        Object.keys(propValue).forEach(styleName => {\n          let styleValue = propValue[styleName]\n          style.setProperty(styleName, styleValue)\n        })\n      } else {\n        domElement[propKey] = propValue\n      }\n    }\n  }\n}\n\ncustomRenderer = ReactReconciler(hostConfig)\n\nexport const CustomDom = {\n  render: (reactElement, container) => {\n    let root = container._reactRootContainer\n    if (!root) {\n      // initial mount\n      const isConcurrent = true // concurrent mode\n      root = container._reactRootContainer = customRenderer.createContainer(container, isConcurrent)\n    }\n    customRenderer.updateContainer(reactElement, root)\n  }\n}\n\n","import React from './react'\nimport logo from './logo.svg'\nimport './App.css'\n\n// class ColorText extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       colorIndex: 0\n//     }\n//   }\n//   render () {\n//     const colorPanel = ['red', 'blue']\n//     return (\n//       <div\n//         className=\"color-flip\"\n//         style={{color: colorPanel[this.state.colorIndex]}}\n//         onClick={() => this.setState({ colorIndex: (this.state.colorIndex + 1) % colorPanel.length })}\n//       >\n//         {this.props.children}\n//       </div>\n//     )\n//   }\n// }\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       counter: 0,\n//       value: ''\n//     };\n//     this.handleChange = this.handleChange.bind(this)\n//   }\n  \n//   shouldComponentUpdate (nextProps, nextState) {\n//     if (this.state.counter === 1) {\n//       return false\n//     }\n//     return true\n//   }\n\n//   componentDidMount () {\n//     this.setState({counter: 1})\n//   }\n\n//   componentDidUpdate (prevProps, prevState, snapshot) {\n//     // if (this.state.counter === 3) {\n//     //   this.setState({counter: 0})\n//     // }\n//   }\n\n//   handleChange (event) {\n//     this.setState({value: event.target.value});\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <h1 className=\"App-title\">Welcome to React</h1>\n//         </header>\n//         <div className=\"App-intro\">\n//           <input type=\"text\" value={this.state.value} onInput={this.handleChange} />\n//           <ColorText>      \n//             <div className=\"button-container\">\n//               <button className=\"decrement-button\" onClick={() => {\n//                 this.setState({ counter: this.state.counter - 1 })\n//               }}>\n//                 -\n//               </button>\n//               <div className=\"counter-text\">{this.state.counter}</div>\n//               <button className=\"increment-button\" onClick={() => {\n//                 this.setState({ counter: this.state.counter + 1 })\n//                 this.setState({ counter: this.state.counter + 1 })\n//               }}>\n//                 +\n//               </button>\n//             </div>\n//           </ColorText>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props)\n      this.onChange = this.onChange.bind(this)\n      this.onClick = this.onClick.bind(this)\n      let divs = []\n      for (let i = 0; i < 1000; i++) {\n        divs.push(<div key={i}>{i}</div>)\n      }\n      this.state = {\n          inputValue: \"\",\n          divs,\n      }\n  }\n\n  onChange(e) {\n      this.setState({\n          inputValue: e.target.value,\n      })\n  }\n\n  onClick(e) {\n      let divs = []\n      for (let i = 0; i < 100000; i++) {\n          divs.push(<div key={i}>{i}</div>)\n      }\n      this.setState({\n          divs,\n      })\n  }\n\n  render() {\n      \n      return (\n          <div>\n              <input onChange={this.onChange} value={this.state.inputValue}/>\n              <button onClick={this.onClick}>click</button>\n              {this.state.divs}\n          </div>\n      )\n  }\n}\n\nexport default App\n","import React from './react';\nimport { CustomDom } from './CustomDom';\nimport './index.css';\nimport App from './App';\n\nCustomDom.render(<App />, document.getElementById('root'));\n"]}